Alphabet
%' b g d h w z x v y k l m n s %{'%} p c q r %{s%} %{sh%} t
a á e é i o u %@ ä ë ö
.

%>:0

! the lazy vowel
%{V%}:a %{V%}:á %{V%}:e %{V%}:é %{V%}:i %{V%}:o %{V%}:u
%{V%}:%@ %{V%}:ä %{V%}:ë %{V%}:ö

%{ps%}:0 %{ps%}:%@ %{ps%}:é %{ps%}:á %{ps%}:e !%{ps%}:i

%{and%}:%. %{and%}:%@ %{and%}:a
%{andc%}:a %{andc%}:á

%{%~á%}:á %{%~á%}:%@
%{%~e%}:e %{%~e%}:%@

%{%~iy%}:i %{%~iy%}:0 %{%~iy%}:é

%{short%}:0
%{consec%}:0
%{cons%}:0
%{pause%}:0

%{%+%*%}:%{%*%}
%{%-%*%}:0

0:%@
0:i
 ;

Sets

Begedkefet = b g d k p t ;
Vowel = a á e é i o u %@ ä ë ö ;
Cons = %' b g d h w z x v y k l m n s %{'%} p c q r %{s%} %{sh%} t ;

NonVowCons = b g d h z x v k l m n s %{'%} p c q r %{s%} %{sh%} t ;

Stress = %{%+%*%} %{%-%*%} ;

Rules

"null @ or @ after final k"
0:%@ <=> :NonVowCons ( . ) _ :NonVowCons ;
         :NonVowCons ( . ) _ %' ;
         h _ y [ :Vowel | w: ] ;
         k ( :0 | :. )* _ .#. ;

"final y"
0:i <=> :Cons _ y :0* .#. ;

!!!!!!!!!!!!!!!
!!! h
!!!!!!!!!!!!!!!

"lamed-he verbs"
h:0 <=> _ %>: %{short%}: ;
        %{%-%*%}: _ ;

!!!!!!!!!!!!!!!
!!! a
!!!!!!!!!!!!!!!

"blah"
a:á <=> _ %{%-%*%}: %' ;

"ay → ey cons"
a:e <=> _ y ?* %{cons%}: ;

"stress shift a"
a:é <=> _ %{%-%*%}: ;
        except _ %{%-%*%}: [ %' | h: | x ] ;

"shress shift é h"
é:0 <=> _ %{%-%*%}: h: ;

"stress shift e"
e:é <=> _ %{%-%*%}: ;
        except !. _ ; ! TODO: is this right?
          _ :* %{pause%}: ;

"stress shift to ä"
ä:a <=> _ %{%+%*%}: ;
        except _ %{%+%*%}: y :0* .#. ;

"stress shift to äy#"
ä:i <=> _ %{%+%*%}: y :0* .#. ;

"stress shift hollow verbs 1"
w:á <=> _ .:0 %{%-%*%}: ;
        except _ .: %{%-%*%}: .#. ;

"stress shift hollow verbs 2"
.:0 <=> w:á _ %{%-%*%}: ;
        %{andc%}: y _ :%@ ;

!!!!!!!!!!!!!!!
!!! OTHER
!!!!!!!!!!!!!!!

"3sg poss after y"
o:0 <=> y %{ps%}: w: _ ;

"weaken final vowel in construct when suffix"
V1:V2 <=> _ [ Cons - y - x ] %{cons%}: ;
          !except .#. Cons ( . ) _ Cons %{cons%}: .#. ;
          except _ Cons %{cons%}: .#. ;
      where V1 in ( a  á  e  é  )
            V2 in ( %@ %@ %@ %@ )
      matched ;

"weaken only vowel in construct"
V1:V2 <=> .#. Cons ( . ) _ [ Cons - y - x ] %{cons%}: .#. ;
      where V1 in ( e )
            V2 in ( é )
      matched ;

"weaken final vowel in construct before guttural?"
á:é => _ x %{cons%}: ;

"stress shift to i"
i:a <=> _ %{%+%*%}: r ; ! ??? r'h but not qr' - now kind of final?

"double schwa"
%@:i <=> _ Cons :%@ ;

"vav consec before aleph"
%{andc%}:á <=> _ %' ;
               except _ %' ä ;

"{and} only a sometimes"
%{and%}:a <=> _ [ %' | %{%'%} | x ] :ä ;

"stress shift from hiriq male' - i"
i:é <=> _ y: %{%-%*%}: ;
        except _ y: %{%-%*%}: %' ;

"stress shift from hiriq male' - iy'"
i:e <=> _ y: %{%-%*%}: %' ;

"stress shift from hiriq male' - y"
y:0 <=> [ i:é | i:e ] _ %{%-%*%}: ;

! Resources:
! http://wiki.apertium.org/wiki/Starting_a_new_language_with_HFST#Enter_twol
! https://kitwiki.csc.fi/twiki/bin/view/KitWiki/HfstHome
! https://github.com/hfst/
! http://wiki.apertium.org/wiki/Twol
! http://wiki.apertium.org/wiki/Hfst

